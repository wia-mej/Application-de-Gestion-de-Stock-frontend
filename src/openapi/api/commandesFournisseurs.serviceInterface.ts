/**
 * Gestion de stock REST API
 * Documentation pour l\'API REST Gestion des stocks
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: wiamejaoui.wj@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { CommandeFournisseurDto } from '../model/models';
import { LigneCommandeFournisseurDto } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface CommandesFournisseursServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Supprimer une commande fournisseur
     * Cette méthode permet de supprimer une commande fournisseur donnée.
     * @param idCommandeFournisseur 
     */
    delete5(idCommandeFournisseur: number, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Supprimer un produit d\&#39;une commande fournisseur
     * Cette méthode permet de supprimer un produit d\&#39;une commande fournisseur donnée.
     * @param idCommande 
     * @param idLigneCommande 
     */
    deleteProduit(idCommande: number, idLigneCommande: number, extraHttpRequestParams?: any): Observable<CommandeFournisseurDto>;

    /**
     * Lister toutes les commandes des fournisseurs
     * Cette méthode permet de lister toutes les commandes des fournisseurs.
     */
    findAll5(extraHttpRequestParams?: any): Observable<Array<CommandeFournisseurDto>>;

    /**
     * Lister les lignes d\&#39;une commande fournisseur
     * Cette méthode permet de lister toutes les lignes d\&#39;une commande fournisseur donnée.
     * @param idCommande 
     */
    findAllLignesCommandesFournisseurByCommandeFournisseurId(idCommande: number, extraHttpRequestParams?: any): Observable<Array<LigneCommandeFournisseurDto>>;

    /**
     * Rechercher une commande fournisseur par code
     * Cette méthode permet de rechercher une commande fournisseur en fonction de son code.
     * @param codeCommandeFournisseur 
     */
    findByCode1(codeCommandeFournisseur: string, extraHttpRequestParams?: any): Observable<CommandeFournisseurDto>;

    /**
     * Rechercher une commande fournisseur par ID
     * Cette méthode permet de rechercher une commande fournisseur en fonction de son ID.
     * @param idCommandeFournisseur 
     */
    findById5(idCommandeFournisseur: number, extraHttpRequestParams?: any): Observable<CommandeFournisseurDto>;

    /**
     * Créer une commande fournisseur
     * Cette méthode permet de créer ou modifier une commande fournisseur.
     * @param commandeFournisseurDto 
     */
    save5(commandeFournisseurDto: CommandeFournisseurDto, extraHttpRequestParams?: any): Observable<CommandeFournisseurDto>;

    /**
     * Mettre à jour l\&#39;état d\&#39;une commande fournisseur
     * Cette méthode permet de mettre à jour l\&#39;état d\&#39;une commande fournisseur.
     * @param idCommande 
     * @param etatCommande 
     */
    updateEtatCommande(idCommande: number, etatCommande: 'EN_PREPARATION' | 'VALIDEE' | 'LIVREE', extraHttpRequestParams?: any): Observable<CommandeFournisseurDto>;

    /**
     * Mettre à jour le fournisseur associé à une commande
     * Cette méthode permet de modifier le fournisseur d\&#39;une commande fournisseur.
     * @param idCommande 
     * @param idFournisseur 
     */
    updateFournisseur(idCommande: number, idFournisseur: number, extraHttpRequestParams?: any): Observable<CommandeFournisseurDto>;

    /**
     * Mettre à jour un produit dans une commande fournisseur
     * Cette méthode permet de mettre à jour un produit associé à une ligne d\&#39;une commande fournisseur.
     * @param idCommande 
     * @param idLigneCommande 
     * @param idProduit 
     */
    updateProduit(idCommande: number, idLigneCommande: number, idProduit: number, extraHttpRequestParams?: any): Observable<CommandeFournisseurDto>;

    /**
     * Mettre à jour la quantité d\&#39;un produit dans une commande fournisseur
     * Cette méthode permet de modifier la quantité d\&#39;un produit dans une commande fournisseur.
     * @param idCommande 
     * @param idLigneCommande 
     * @param quantite 
     */
    updateQuantiteCommande(idCommande: number, idLigneCommande: number, quantite: number, extraHttpRequestParams?: any): Observable<CommandeFournisseurDto>;

}
