/**
 * Gestion de stock REST API
 * Documentation pour l\'API REST Gestion des stocks
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: wiamejaoui.wj@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ChangerMotDePasseUtilisateurDto } from '../model/models';
import { UtilisateurDto } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface UtilisateursServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Changer le mot de passe d\&#39;un utilisateur
     * Cette méthode permet de modifier le mot de passe d\&#39;un utilisateur via l\&#39;objet spécifié.
     * @param changerMotDePasseUtilisateurDto 
     */
    changerMotDePasse(changerMotDePasseUtilisateurDto: ChangerMotDePasseUtilisateurDto, extraHttpRequestParams?: any): Observable<UtilisateurDto>;

    /**
     * Supprimer un utilisateur par ID
     * Cette méthode supprime un utilisateur basé sur l\&#39;ID fourni.
     * @param idUtilisateur 
     */
    delete1(idUtilisateur: number, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Afficher tous les utilisateurs
     * Cette méthode retourne la liste de tous les utilisateurs présents dans la base de données.
     */
    findAll1(extraHttpRequestParams?: any): Observable<Array<UtilisateurDto>>;

    /**
     * Rechercher un utilisateur par email
     * Cette méthode permet de récupérer un utilisateur à partir de son email.
     * @param email 
     */
    findByEmail(email: string, extraHttpRequestParams?: any): Observable<UtilisateurDto>;

    /**
     * Rechercher un utilisateur par ID
     * Cette méthode permet de récupérer un utilisateur en fonction de son ID.
     * @param idUtilisateur 
     */
    findById1(idUtilisateur: number, extraHttpRequestParams?: any): Observable<UtilisateurDto>;

    /**
     * Enregistrer ou modifier un utilisateur
     * Cette méthode permet d\&#39;enregistrer ou de modifier un utilisateur.
     * @param utilisateurDto 
     */
    save1(utilisateurDto: UtilisateurDto, extraHttpRequestParams?: any): Observable<UtilisateurDto>;

}
